services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: auromart
      POSTGRES_USER: auromart
      POSTGRES_PASSWORD: auromart123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U auromart -d auromart"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://auromart:auromart123@postgres:5432/auromart
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=auromart-secret-key-2024-super-secure
      - JWT_SECRET_KEY=auromart-jwt-secret-key-2024-super-secure
      - CORS_ORIGINS=http://localhost:3000,http://localhost:3001,http://frontend:80
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:5000/api/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      - backend
    restart: unless-stopped

volumes:
  postgres_data:
